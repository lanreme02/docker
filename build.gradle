buildscript {

	dependencies {

		classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
	}
}

plugins {
	id "io.spring.dependency-management" version "1.0.6.RELEASE"
	//id 'com.github.spotbugs' version "1.6.6"
	id 'idea'
	id 'jacoco'
	id 'java'
	id 'org.springframework.boot' version '2.1.1.RELEASE'
	id 'pmd'
	id 'net.ltgt.apt' version '0.10'
	id 'io.franzbecker.gradle-lombok' version '1.14'
	id 'com.palantir.docker' version '0.20.1'
}

//apply plugin: 'com.palantir.docker'

bootJar {
	baseName = 'portal'
	version =  '0.0.1'
}

docker {
	name "login/cvr"
	copySpec.from("build/libs").into("build/libs")
}

lombok {
	sha256 = ""
}

group = 'com.cognizant'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	testCompile 'com.google.guava:guava-testlib:27.0.1-jre'
	compile 'org.flywaydb:flyway-core:5.2.4'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	runtimeOnly 'org.postgresql:postgresql'
	//runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//testCompile group: 'org.mockito', name: 'mockito-core', version: '2.13.0'

	//compile 'io.springfox:springfox-data-rest:2.9.2'
	//compile 'io.springfox:springfox-swagger-ui:2.9.2'
	//compile 'io.springfox:springfox-swagger2:2.9.2'

	//compile group: 'javax.servlet', name: 'jstl', version: '1.2'
	//compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper', version: '9.0.12'
	//compile group: 'org.eclipse.jdt.core.compiler', name: 'ecj', version: '4.6.1'

	//compile group: 'org.webjars', name: 'bootstrap', version: '3.2.0'


	//compile("org.springframework.boot:spring-boot-starter-thymeleaf")

	//compile("org.springframework.boot:spring-boot-devtools")





}

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination file("${buildDir}/reports/coverage/".toString())
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 1
			}
		}
	}
}

pmd {
	ignoreFailures = false
	pmdTest.enabled=true
}

//test.finalizedBy jacocoTestCoverageVerification, jacocoTestReport